#import "./commonFragments.gql"

query projects(
  $first: Int = 1000
  $filters: ProjectFilters = {}
  $orders: [[String]]
) {
  projects(first: $first, filters: $filters, orders: $orders) {
    pageInfo {
      ...PageInfoFragment
    }
    edges {
      node {
        ...ProjectFragment
      }
    }
  }
}

query project($id: String) {
  node(id: $id) {
    ... on Project {
      ...ProjectFragment
    }
  }
}

query countProjects($filters: ProjectFilters = {}) {
	countProjects(filters:$filters)
}

# Create Project
mutation createProject(
  $companyId: ID!
  $customerId: ID
  $description: String
  $endsAt: NaiveDateTime
  $name: String!
  $startsAt: NaiveDateTime
) {
  createProject(
    companyId: $companyId
    customerId: $customerId
    description: $description
    endsAt: $endsAt
    name: $name
    startsAt: $startsAt
  ) {
    successful
    messages {
      field
      message
    }
    result {
      ...ProjectFragment
    }
  }
}

# Update Project
mutation updateProject(
  $companyId: ID
  $customerId: ID
  $description: String
  $endsAt: NaiveDateTime
  $id: ID!
  $isArchived: Boolean
  $name: String
  $startsAt: NaiveDateTime
) {
  updateProject(
    companyId: $companyId
    customerId: $customerId
    description: $description
    endsAt: $endsAt
    id: $id
    isArchived: $isArchived
    name: $name
    startsAt: $startsAt
  ) {
    successful
    messages {
      field
      message
    }
    result {
      ...ProjectFragment
    }
  }
}

fragment ProjectFragment on Project {
  companyId
  customerId
  description
  endsAt
  id
  isArchived
  name
  startsAt
}
