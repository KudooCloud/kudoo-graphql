#import "./commonFragments.gql"

query timeSheets(
  $where: TimeSheetWhereInput
  $orderBy: TimeSheetOrderByInput
  $skip: Int
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  timeSheets(
    where: $where
    orderBy: $orderBy
    skip: $skip
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...PageInfoFragment
    }
    edges {
      node {
        ...TimeSheetFragment
      }
    }
    aggregate {
      count
    }
  }
}

query timeSheet($where: WhereUniqueInput!) {
  timeSheet(where: $where) {
    ...TimeSheetFragment
  }
}

# Create TimeSheet
mutation createTimeSheet($data: kTimeSheetCreateInput!) {
  createTimeSheet(data: $data) {
    ...TimeSheetFragment
  }
}

# Update TimeSheet
mutation updateTimeSheet(
  $data: kTimeSheetUpdateInput!
  $where: WhereUniqueInput!
) {
  updateTimeSheet(data: $data, where: $where) {
    ...TimeSheetFragment
  }
}

# Delete TimeSheet
mutation deleteTimeSheet($where: WhereUniqueInput!) {
  deleteTimeSheet(where: $where) {
    ...TimeSheetFragment
  }
}

# Notify TimeSheet
mutation timeSheetNotify(
  $timeSheetId: ID!
  $to: [String!]!
  $cc: [String!]!
  $bcc: [String!]!
) {
  timeSheetNotify(timeSheetId: $timeSheetId, to: $to, cc: $cc, bcc: $bcc) {
    success
  }
}

# Approve TimeSheet
mutation timeSheetApprove($timeSheetId: ID!, $to: [String!]!) {
  timeSheetApprove(timeSheetId: $timeSheetId, to: $to) {
    success
  }
}
