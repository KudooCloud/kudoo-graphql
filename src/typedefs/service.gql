#import "./commonFragments.gql"

query services($filters: ServiceFilters = {}, $orders: [[String]]) {
  services(first: 1000, filters: $filters, orders: $orders) {
    pageInfo {
      ...PageInfoFragment
    }
    edges {
      node {
        ...ServiceFragment
      }
    }
  }
}

query service($id: String) {
  node(id: $id) {
    ... on Service {
      ...ServiceFragment
    }
  }
}

# Create Service
mutation createService(
  $name: String
  $billingType: String
  $companyId: ID!
  $includeConsTax: Boolean
  $isTemplate: Boolean
  $timeBasedType: TimeBasedType
  $totalAmount: MoneyInput
) {
  createService(
    name: $name
    billingType: $billingType
    companyId: $companyId
    includeConsTax: $includeConsTax
    isTemplate: $isTemplate
    timeBasedType: $timeBasedType
    totalAmount: $totalAmount
  ) {
    successful
    messages {
      field
      message
    }
    result {
      ...ServiceFragment
    }
  }
}

# Update Service
mutation updateService(
  $id: ID!
  $name: String
  $billingType: String
  $companyId: ID!
  $includeConsTax: Boolean
  $isTemplate: Boolean
  $timeBasedType: TimeBasedType
  $totalAmount: MoneyInput
  $isArchived: Boolean
) {
  updateService(
    id: $id
    name: $name
    billingType: $billingType
    companyId: $companyId
    includeConsTax: $includeConsTax
    isTemplate: $isTemplate
    timeBasedType: $timeBasedType
    totalAmount: $totalAmount
    isArchived: $isArchived
  ) {
    successful
    result {
      ...ServiceFragment
    }
  }
}

# Delete Service
mutation deleteService($id: ID!) {
  deleteService(id: $id) {
    successful
    result {
      ...ServiceFragment
    }
  }
}

fragment ServiceFragment on Service {
  id
  name
  billingType
  companyId
  includeConsTax
  isTemplate
  timeBasedType
  isArchived
  totalAmount {
    currency
    value
  }
}
