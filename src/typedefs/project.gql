#import "./commonFragments.gql"

query projects(
  $where: ProjectWhereInput
  $orderBy: ProjectOrderByInput
  $skip: Int
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  projects(
    where: $where
    orderBy: $orderBy
    skip: $skip
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...PageInfoFragment
    }
    edges {
      node {
        ...ProjectFragment
      }
    }
    aggregate {
      count
    }
  }
}

query project($where: WhereUniqueInput!) {
  project(where: $where) {
    ...ProjectFragment
  }
}

query countProjects($filters: ProjectFilters = {}) {
  countProjects(filters: $filters)
}

# Create Project
mutation createProject($data: kProjectCreateInput!) {
  createProject(data: $data) {
    ...ProjectFragment
  }
}

# Update Project
mutation updateProject($data: kProjectUpdateInput!, $where: WhereUniqueInput!) {
  updateProject(data: $data, where: $where) {
    ...ProjectFragment
  }
}

# Delete Project
mutation deleteProject($where: WhereUniqueInput!) {
  deleteProject(where: $where) {
    ...ProjectFragment
  }
}
