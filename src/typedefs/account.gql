#import "./company.gql"
#import "./commonFragments.gql"

# Register
mutation register(
  $email: String!
  $firstName: String!
  $lastName: String!
  $password: String!
  $passwordRepeat: String!
) {
  register(
    email: $email
    firstName: $firstName
    lastName: $lastName
    password: $password
    passwordRepeat: $passwordRepeat
  ) {
    success
  }
}

# Login
mutation login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    id
    activePlan {
      ...PlanFragment
    }
    contactNumber
    email
    firstName
    isActive
    isArchived
    jobTitle
    lastName
    secondAuthEnabled
    token
  }
}

# remember
mutation remember($email: String!) {
  remember(email: $email) {
    success
  }
}

# Reset Password
mutation resetPassword($password: String!, $passwordRepeat: String!) {
  resetPassword(password: $password, passwordRepeat: $passwordRepeat) {
    success
  }
}

# update current user
mutation updateUser(
  $firstName: String
  $lastName: String
  $jobTitle: String
  $contactNumber: Json
  $secondAuthEnabled: Boolean
  $oldPassword: String
  $password: String
  $passwordRepeat: String
) {
  updateUser(
    firstName: $firstName
    lastName: $lastName
    jobTitle: $jobTitle
    contactNumber: $contactNumber
    secondAuthEnabled: $secondAuthEnabled
    oldPassword: $oldPassword
    password: $password
    passwordRepeat: $passwordRepeat
  ) {
    id
    activePlan {
      ...PlanFragment
    }
    contactNumber
    email
    firstName
    isActive
    isArchived
    jobTitle
    lastName
    secondAuthEnabled
    token
  }
}

query me {
  me {
    accessLevel
    company {
      ...CompanyFragment
    }
    companyMembers {
      isArchived
      role
      status
      user {
        ...UserFragment
      }
    }
    session {
      ...SessionFragment
    }
    user {
      ...UserFragment
    }
    userMembers {
      company {
        ...CompanyFragment
      }
      status
      isArchived
      role
    }
  }
}

query users($filters: UserFilters = {}, $orders: [[String]]) {
  users(first: 1000, filters: $filters, orders: $orders) {
    pageInfo {
      ...PageInfoFragment
    }
    edges {
      node {
        ...UserFragment
      }
    }
  }
}

mutation logout {
  logout {
    successful
  }
}
